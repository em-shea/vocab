AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An app that sends a daily email message for each HSK level with a vocab word
Parameters:
  WordsBucketName:
    Type: String
  WordsBucketKey:
    Type: String
  ListsBucketName:
    Type: String
  ListsBucketKey:
    Type: String
  DomainName:
    Type: String
  SubNotifyEmail:
    Type: String
  DynamoBackupsS3BucketName:
    Type: String
  Stage:
    Type: String

Globals:
  Api:
    # Add AllowMethods with a list of methods for this domain name to call the API in this template
    # Cors: !Sub "'${DomainName}'"
    Cors:
      AllowMethods: "'OPTIONS,POST,GET'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:

### Lambda functions

  SendDailyEmail:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub SendDailyEmail-${Stage}
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: src/send_daily_email
      Description: A function that sends a daily email to subscribers with a vocab word for each HSK level
      Timeout: 120
      Policies:
        - SESCrudPolicy:
            IdentityName: haohaotiantian.com
        - S3ReadPolicy:
            BucketName: !Ref WordsBucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref WordHistoryDynamoDBTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriberContactListDynamoDBTable
      Environment:
        Variables:
          SUB_TOPIC_ARN: !Ref NotificationTopic
          WORDS_BUCKET_NAME: !Ref WordsBucketName
          WORDS_BUCKET_KEY: !Ref WordsBucketKey
          LISTS_BUCKET_NAME: !Ref ListsBucketName
          LISTS_BUCKET_KEY: !Ref ListsBucketKey
          ANNOUNCEMENTS_BUCKET: !Ref VocabAnnouncementsBucket
          TABLE_NAME: !Ref WordHistoryDynamoDBTable
          CONTACT_TABLE_NAME: !Ref SubscriberContactListDynamoDBTable
          STAGE: !Ref Stage
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 20 * * ? *)
      Layers:
      - !Ref Layer

  SampleVocab:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub SampleVocab-${Stage}
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: src/sample_vocab
      Description: A function that returns five random words for each HSK level
      MemorySize: 128
      Timeout: 120
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref WordsBucketName
      Environment:
        Variables:
          WORDS_BUCKET_NAME: !Ref WordsBucketName
          WORDS_BUCKET_KEY: !Ref WordsBucketKey
      Events:
        SampleVocabApi:
          Type: Api
          Properties:
            Path: /sample_vocab
            Method: GET
      Layers:
      - !Ref Layer

  WordHistory:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub WordHistory-${Stage}
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: src/word_history
      Description: A function that returns a list of previous daily words.
      MemorySize: 128
      Timeout: 120
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WordHistoryDynamoDBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref WordHistoryDynamoDBTable
      Events:
        WordHistoryApi:
          Type: Api
          Properties:
            Path: /history
            Method: GET

  Subscribe:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub VocabSubscribe-${Stage}
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: src/subscribe
      Description: A function that takes an HSK level and email address inputs and subscribes to a topic.
      MemorySize: 128
      Timeout: 120
      Policies:
        - SESCrudPolicy:
            IdentityName: haohaotiantian.com
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriberContactListDynamoDBTable
      Environment:
        Variables:
          SUB_TOPIC_ARN: !Ref NotificationTopic
          LISTS_BUCKET_NAME: !Ref ListsBucketName
          LISTS_BUCKET_KEY: !Ref ListsBucketKey
          STAGE: !Ref Stage
          TABLE_NAME: !Ref SubscriberContactListDynamoDBTable
      Events:
        SubscribeApi:
          Type: Api
          Properties:
            Path: /sub
            Method: POST
      Layers:
      - !Ref Layer

  Unsubscribe:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub VocabUnsubscribe-${Stage}
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: src/unsubscribe
      Description: A function that unsubscribes the user from the given HSK level or from all levels.
      MemorySize: 128
      Timeout: 120
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriberContactListDynamoDBTable
      Environment:
        Variables:
          STAGE: !Ref Stage
          TABLE_NAME: !Ref SubscriberContactListDynamoDBTable
      Events:
        SubscribeApi:
          Type: Api
          Properties:
            Path: /unsub
            Method: POST
  
  BackupDynamoToS3:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub BackupDynamoToS3-${Stage}
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: src/backup_dynamo_s3
      Description: A function that scans the contact list database in DynamoDB and saves a back-up to S3
      MemorySize: 128
      Timeout: 120
      Policies:
        - S3WritePolicy:
            BucketName: !Ref DynamoBackupsS3BucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriberContactListDynamoDBTable
      Environment:
        Variables:
          BACKUPS_BUCKET_NAME: !Ref DynamoBackupsS3BucketName
          TABLE_NAME: !Ref SubscriberContactListDynamoDBTable
      Events:
        WeeklyCloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 16 ? * FRI *)

  Layer:
    # Shared Python modules, namely returning a random vocab word
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: src/layer
      CompatibleRuntimes:
        - python3.7

### API Gateway permissions
### Using a workaround described here: https://github.com/awslabs/serverless-application-model/issues/59

  SampleVocabLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SampleVocab
      Principal: apigateway.amazonaws.com

  WordHistoryPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WordHistory
      Principal: apigateway.amazonaws.com

  SubscribeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Subscribe
      Principal: apigateway.amazonaws.com

  UnsubscribeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Unsubscribe
      Principal: apigateway.amazonaws.com

### DynamoDB tables

  WordHistoryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub WordHistory-${Stage}
      AttributeDefinitions:
        - AttributeName: ListId
          AttributeType: S
        - AttributeName: Date
          AttributeType: S
      KeySchema:
        - AttributeName: ListId
          KeyType: HASH
        - AttributeName: Date
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0

  SubscriberContactListDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub SubscriberContactList-${Stage}
      AttributeDefinitions:
        - AttributeName: ListId
          AttributeType: S
        - AttributeName: SubscriberEmail
          AttributeType: S
      KeySchema:
        - AttributeName: ListId
          KeyType: HASH
        - AttributeName: SubscriberEmail
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0

### S3 bucket for email announcements

  VocabAnnouncementsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub hhtt-email-announcements-${Stage}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

### Receiving function error notifications

  CWLogsNotifications:
    Type: 'AWS::Serverless::Function'
    DependsOn:
      - SubscribeLogGroup
      - SendDailyEmailLogGroup
      - SampleVocabLogGroup
    Properties:
      FunctionName: !Sub CWLogsNotifications-${Stage}
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: src/cw_logs_notifications
      Description: A function that filters function logs for error messages and publishes to SNS
      MemorySize: 128
      Timeout: 120
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
      Environment:
        Variables:
          SUB_TOPIC_ARN: !Ref NotificationTopic
      Events:
        SubFunctionLogs:
          Type: CloudWatchLogs
          Properties:
            LogGroupName:
              !Join [
          '',
          ['/aws/lambda/', !Sub 'SubscribeFunction-${Stage}']
        ]
            FilterPattern: "?Error ?Success"
        SendDailyLogs:
          Type: CloudWatchLogs
          Properties:
            LogGroupName:
              !Join [
          '',
          ['/aws/lambda/', !Sub 'SendDailyEmail-${Stage}']
        ]
            FilterPattern: Error
        SampleVocabLogs:
          Type: CloudWatchLogs
          Properties:
            LogGroupName:
              !Join [
          '',
          ['/aws/lambda/', !Sub 'SampleVocab-${Stage}']
        ]
            FilterPattern: Error

  NotificationTopic:
    # A topic that error notifications are published to
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Protocol: email
        Endpoint: !Ref SubNotifyEmail

  # Creating CloudWatch Logs groups for each function.
  # By default, a log group is only created for a function once the function is invoked.
  # We are creating log groups here to be able to subscribe the CWLogsNotification function to those log groups.
  SubscribeLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - Subscribe
    Properties:
      LogGroupName:
        !Join [
          '',
          ['/aws/lambda/', !Sub 'VocabSubscribe-${Stage}']
        ]

  SendDailyEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - SendDailyEmail
    Properties:
      LogGroupName:
        !Join [
          '',
          ['/aws/lambda/', !Sub 'SendDailyEmail-${Stage}']
        ]

  SampleVocabLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - SampleVocab
    Properties:
      LogGroupName:
        !Join [
          '',
          ['/aws/lambda/', !Sub 'SampleVocab-${Stage}']
        ]

  UnsubscribeLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - Unsubscribe
    Properties:
      LogGroupName:
        !Join [
          '',
          ['/aws/lambda/', !Sub 'VocabUnsubscribe-${Stage}']
        ]