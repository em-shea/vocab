AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An app that sends a daily email message for each HSK level with a vocab word
Parameters:
  WordsBucketName:
    Type: String
  WordsBucketKey:
    Type: String
  ListsBucketName:
    Type: String
  ListsBucketKey:
    Type: String
  DomainName:
    Type: String
  SGApiKey:
    Type: String
  SubNotifyEmail:
    Type: String
  Stage:
    Type: String

Globals:
  Api:
    # Add AllowMethods with a list of methods for this domain name to call the API in this template
    Cors: !Sub "'${DomainName}'"

Resources:
  SendDailyCampaign:
    # A function that sends a daily SendGrid campaign with a vocab word for each HSK level
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub SendDailyCampaign-${Stage}
      Handler: SendDailyCampaign.lambda_handler
      Runtime: python3.7
      CodeUri: ./SendDailyCampaign
      Description: A function that sends a daily SendGrid campaign with a vocab word for each HSK level
      Timeout: 120
      Policies:
       - AWSLambdaExecute
       - AWSLambdaRole
       - SNSPublishMessagePolicy:
           TopicName: !GetAtt NotificationTopic.TopicName
      Environment:
        Variables:
          SG_API_KEY: !Ref SGApiKey
          SUB_TOPIC_ARN: !Ref NotificationTopic
          WORDS_BUCKET_NAME: !Ref WordsBucketName
          WORDS_BUCKET_KEY: !Ref WordsBucketKey
          LISTS_BUCKET_NAME: !Ref ListsBucketName
          LISTS_BUCKET_KEY: !Ref ListsBucketKey
          STAGE: !Ref Stage
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 20 * * ? *)
      Layers:
       - !Ref Layer

  SampleVocabFunction:
    # A function that returns five random words for each HSK level
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub SampleVocabFunction-${Stage}
      Handler: SampleVocabFunction.lambda_handler
      Runtime: python3.7
      CodeUri: ./SampleVocabFunction
      Description: A function that returns five random words for each HSK level
      MemorySize: 128
      Timeout: 120
      Policies:
       - AWSLambdaExecute
       - AWSLambdaRole
      Environment:
        Variables:
          WORDS_BUCKET_NAME: !Ref WordsBucketName
          WORDS_BUCKET_KEY: !Ref WordsBucketKey
      Events:
        SampleVocabFunctionApi:
          # An API Gateway endpoint that responds to HTTP GET
          Type: Api
          Properties:
            Path: /sample_vocab
            Method: GET
      Layers:
       - !Ref Layer
  
  SubscribeFunction:
    # A function that takes an HSK level and email address inputs and subscribes to a topic
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub SubscribeFunction-${Stage}
      Handler: SubscribeFunction.lambda_handler
      Runtime: python3.7
      CodeUri: ./SubscribeFunction
      Description: A function that takes an HSK level and email address inputs and subscribes to a topic.
      MemorySize: 128
      Timeout: 120
      Policies:
       - AWSLambdaExecute
       - AWSLambdaRole
       - AWSLambdaBasicExecutionRole
       - SNSPublishMessagePolicy:
           TopicName: !GetAtt NotificationTopic.TopicName
      Environment:
        Variables:
          SG_API_KEY: !Ref SGApiKey
          SUB_TOPIC_ARN: !Ref NotificationTopic
      Events:
        SubscribeFunctionApi:
          # An API Gateway endpoint that responds to HTTP POST
          Type: Api
          Properties:
            Path: /sub
            Method: POST
      Layers:
       - !Ref Layer

  Layer:
    # A Layer that holds a Python module that returns a random word when given an HSK level
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: ./layer
      CompatibleRuntimes:
        - python3.7

  CWLogsNotifications:
    # A function that filters function logs for error messages and publishes to SNS
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub CWLogsNotifications-${Stage}
      Handler: CWLogsNotifications.lambda_handler
      Runtime: python3.7
      CodeUri: ./CWLogsNotifications
      Description: A function that send notifications to an SNS topic for based on CW logs metric filters
      MemorySize: 128
      Timeout: 120
      Policies:
       - AWSLambdaExecute
       - AWSLambdaRole
       - SNSPublishMessagePolicy:
           TopicName: !GetAtt NotificationTopic.TopicName
      Environment:
        Variables:
          SUB_TOPIC_ARN: !Ref NotificationTopic
      Events:
        SubFunctionLogs:      
          Type: CloudWatchLogs
          Properties:
            LogGroupName: !Sub /aws/lambda/SubscribeFunction-${Stage}
            FilterPattern: "?Error ?Success"
        SendDailyLogs:      
          Type: CloudWatchLogs
          Properties:
            LogGroupName: !Sub /aws/lambda/SendDailyCampaign-${Stage}
            FilterPattern: Error
        SampleVocabLogs:      
          Type: CloudWatchLogs
          Properties:
            LogGroupName: !Sub /aws/lambda/SampleVocabFunction-${Stage}
            FilterPattern: Error

  NotificationTopic:
    # A topic that error notifications will be published to
    Type: AWS::SNS::Topic
    Properties:
      Subscription: 
      - Protocol: email
        Endpoint: !Ref SubNotifyEmail

  SubscribeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - SubscribeFunction-${Stage}
    Properties:
      LogGroupName: !Sub /aws/lambda/SubscribeFunction-${Stage}

  SendDailyCampaignLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - SendDailyCampaign-${Stage}
    Properties:
      LogGroupName: !Sub /aws/lambda/SendDailyCampaign-${Stage}
  
  SampleVocabFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - SampleVocabFunction-${Stage}
    Properties:
      LogGroupName: !Sub /aws/lambda/SampleVocabFunction-${Stage}